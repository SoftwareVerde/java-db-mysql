plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
}

group = 'com.softwareverde'
version = '4.3.1'

compileJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

task makeJar(type: Jar) {
    manifest {
        attributes  'Implementation-Title': 'Java Database MySQL Wrapper',
                    'Implementation-Version': archiveVersion
    }
    with jar
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    // MySQL Driver 5.1 vs 8.x:
    //  Pro:
    //      More configuration parameters to tweak (performance, and redundancy)
    //  Cons:
    //      v8 requires extra dependencies (guava, protobuf, deep dependency tree)
    //      Does not support MySQL < v5.5
    //      Does not support Java < 8
    //
    // https://static.rainfocus.com/oracle/oow19/sess/1560593650733001Xwzz/PF/ConnectorJ_Feature_Review_and_Upgrading_1568911960850001GtUx.pdf
    api                 group: 'org.mariadb.jdbc',          name: 'mariadb-java-client',    version: '3.1.1'
    api                 group: 'com.github.softwareverde',  name: 'java-db',                version: 'v3.3.0'

    implementation      group: 'com.github.softwareverde',  name: 'java-util',              version: 'v2.7.2'

    testImplementation  group: 'junit',                     name: 'junit',                  version: '4.12'
}

tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (! desc.parent) {
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}
